This file describes each tasks, separated by ECU (ACC and ICM).
The simulation ECU will also be detailed here, but it does not use task, since it does not use RTOS.

Futhermore, each task will be divided as the following example:

Task : Task_name
    Description
        ...
    ALARMTIME
        ...
    CYCLETIME
        ...
Description field will describe what that task executes.
ALARMTIME represents when the task is first called by the RTOS.
CYCLETIME represents the interval between calls of that task after its first execution.
Both ALARMTIME and CYCLETIME are defined in the .oil file. 
The task name and its behaviour (such as alarm, type, size, etc) are defined in the respective .oil file.
See ECUs Descriptions file for more information or the following link:
  http://www.irisa.fr/alf/downloads/puaut/TPNXT/SummaryOSEK.htm

The ALARMTIME has "high" values to allow us to turn the hardware on and to setup the configuration.
The CYCLETIME has low values, since it it a time critical application. Normally, these values would depend on the sensors (and other factors) used on the system.

=========================================================================================================================================
                                                            ACC ECU
=========================================================================================================================================

TASK: Can_Receive
    Description
         Task used to receive information via CAN bus from both ECUs. It checks if there is CAN message on the buffer via the digital pin 2.
         If true, checks the message ID field of that CAN message frame and compare it with the ID of the messages it is able to receive.
         Depending of the ID message, the DATA is different and thus, the data storage variable and data decodification is different based on data dictionary.
         Example: Messages with ID 0x0C1B3049 means its contents are from the simulation ECU and contains the following data in its data field (max of 8 bytes, index [0...7])
            Ego_speed, on index [1] and [2] of the data field vector.
            Relative_distance, on index [3] and [4] of the data field vector.
            Relative_speed, on index [5] and [6] of the data field vector.
         Thus, it diferentiates between message sources (ICM or simulation) and its content and how to store it correctly.


    ALARMTIME: 1000 ms
    CYCLETIME: 10 ms
---------------------------------------------------------------------------------------------

TASK: Logic_block
    Description
         Task used to enable or disable the ACC system based on user input and context.
         If speed is less than 40 km/h, the ACC cannot be enabled. Also, if there is a faulty sensor or any pedal is pressed, it also cannot be enabled (transition off to on).
         If the acc was enabled and any of the following is true, the ACC is disabled: Faulty_signal, Gas_pedal, Brake_pedal.
         In either case, a CAN message with ID 0x18FEF100 is sent detailing the ACC status. Useful for user vizualization of the system in the ICM ECU.
         
    ALARMTIME: 4000 ms
    CYCLETIME: 100 ms

---------------------------------------------------------------------------------------------

TASK: Calculate_ACC_Acceleration
    Description
         It is the main task of the ACC ECU. Used to calculate the necessary acceleration to reach a calculated speed or distance, based on context.
         Before calculating the acceleration, calculates the Time_gap based on the Time_gap_base variable and the Rain variable.
         Then, calculates the safe distance based on D_default + (Ego_speed * Time_gap)
         If the ACC (ego) car is in a "dangerous" distance (Relative_distance < Safe_distance), the acceleration calculated is to control distance.
         otherwise (Relative_distance >= Safe_distance), controls the speed based on user desired speed (Set_speed) and Front car speed.
        
         When the acceleration is calculated, send it via CAN bus to the Simulation ECU. This value will be received by the simulation ECU to update
         the Ego car acceleration on its simulation.

    ALARMTIME: 4000 ms
    CYCLETIME: 10 ms
---------------------------------------------------------------------------------------------

=========================================================================================================================================
                                                            ICM ECU
=========================================================================================================================================

TASK: ACC_speed_set_send
    Description
         This task is responsible for receiver user input regarding the speed set and ACC input to be sent to the ACC ECU.
         The user desired speed is received via serial and is limited between the values 40km/h and 120 km/h.
         To receive via serial, it veryfies the serial buffer for content.
         Aftewards, writes a CAN message frame with ID 0x18F00503 with the ACC input and Set_speed value.


    ALARMTIME: 100 ms
    CYCLETIME: 300 ms
---------------------------------------------------------------------------------------------

TASK: Receive
    Description
         This task is responsible for receiving the necessary information via CAN bus from the ACC and simulation ECU.
         From ACC ECU, receives the ACC status.
         From simulation ECU, receives the Ego_speed information.
    ALARMTIME: 20 ms
    CYCLETIME: 20 ms

---------------------------------------------------------------------------------------------

TASK: print
    Description
         This task is responsible to provide the user with the received information from other ECUs. 
         Also prints the information that was sent.
    ALARMTIME: 25 ms
    CYCLETIME: 25 ms

---------------------------------------------------------------------------------------------

=========================================================================================================================================
                                                            Simulation ECU
=========================================================================================================================================

Responsible for running a simulation to generate DATA to be feed to the system. Normally, this would be an ECU that receives
    sensors outputs, but we do not have the means to execute live test or hardware testes and thus, it is necessary to simulate the environment
    to generate the "would be" sensors DATA. Also, it would not be a good to test to run it on a static environment, since the system behaviour
    would not be validated correctly.
    The simulation is done by simulating both the Ego car and lead car's positions and velocity in each iteraction using the DATA obtained in  previous
    iteraction. By simulating the environment where the system would act, it is possible to generate what would be the sensors measurements 
    in the real system and thus, provide the system with the relative distance, ego speed and relative speed.
    Contrary to the others ECUs, the simulation ECU does not use Trampoline RTOS and is just a "normal" arduino code, but the time between iteractions
    is controlled using the "milis()" function, to better synchronize with the RTOS based ECUs rate. This also avoids the CAN bus overload, since
    the simulation ECUs uses the bus to read and send updated data each iteraction.
    To simulate the distance sensor measurements, the simulation has both the ego car and lead car position as values, similar to an one dimensional 
    vector, whereas the difference between their positions represents the relative distance between them and thus, the "distance sensor" value. 
    It can also be used as way to determine the relative speed.